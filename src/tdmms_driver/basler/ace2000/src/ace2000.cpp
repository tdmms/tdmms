typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
#include <xcliball.h>
#include <sys/types.h>
#include <stdlib.h>
#include <ros/ros.h>
#include <cstdlib>
#include <unistd.h>
#include <cerrno>
#include <cstring>
#include <csignal>
#include <stdio.h>
#include <fcntl.h>
#include <std_msgs/UInt32.h>

class ace2000_master {
 public:
  ace2000_master() {
    ros::NodeHandle node;
    cmd_set_exp_ = node.subscribe("/ace2000_master/cmd_set_exp", 1,
                                  &ace2000_master::cmd_set_exp_Callback, this);
  }

  ~ace2000_master() {}

  void cmd_set_exp_Callback(const std_msgs::UInt32 &exptime) {
    char cmdset[53][13] = {{0x01, 0x05, 0x04, 0x04, 0x04, 0x02, 0x00,
                            0x03, 0x00, 0x00, 0x00, 0x00, 0x03},
                           {0x01, 0x05, 0x04, 0x04, 0x04, 0x02, 0x00,
                            0x00, 0x00, 0x00, 0x00, 0x03, 0x03},
                           {0x01, 0x05, 0x04, 0x04, 0x00, 0x02, 0x00,
                            0x00, 0x00, 0x00, 0x00, 0x07, 0x03},
                           {0x01, 0x05, 0x04, 0x64, 0x04, 0x02, 0x00,
                            0x40, 0x00, 0x00, 0x00, 0x23, 0x03},
                           {0x01, 0x05, 0x04, 0x24, 0x04, 0x02, 0x00,
                            0x40, 0x00, 0x00, 0x00, 0x63, 0x03},
                           {0x01, 0x05, 0x04, 0x44, 0x04, 0x02, 0x00,
                            0x40, 0x00, 0x00, 0x00, 0x03, 0x03},
                           {0x01, 0x05, 0x04, 0x04, 0x00, 0x02, 0x00,
                            0x00, 0x00, 0x00, 0x00, 0x07, 0x03},
                           {0x01, 0x05, 0x04, 0x24, 0x04, 0x04, 0x00,
                            0x00, 0x00, 0x00, 0x00, 0x25, 0x03},
                           {0x01, 0x05, 0x04, 0x04, 0x00, 0x0E, 0x00,
                            0x00, 0x00, 0x00, 0x00, 0x0B, 0x03},
                           {0x01, 0x04, 0x04, 0x44, 0x07, 0x17, 0x00,
                            0x00, 0x00, 0x54, 0x03, 0x00, 0x00},
                           {0x01, 0x05, 0x04, 0x04, 0x06, 0x02, 0x00,
                            0x00, 0x00, 0x00, 0x00, 0x01, 0x03},
                           {0x01, 0x05, 0x04, 0x04, 0x00, 0x03, 0x00,
                            0x00, 0x00, 0x00, 0x00, 0x06, 0x03},
                           {0x01, 0x04, 0x04, 0x24, 0x07, 0x09, 0x00,
                            0x00, 0x00, 0x2A, 0x03, 0x00, 0x00},
                           {0x01, 0x05, 0x04, 0x24, 0x00, 0x03, 0x00,
                            0x16, 0x00, 0x00, 0x00, 0x30, 0x03},
                           {0x01, 0x05, 0x04, 0x64, 0x01, 0x03, 0x00,
                            0x00, 0x00, 0x00, 0x00, 0x67, 0x03},
                           {0x01, 0x05, 0x04, 0x04, 0x02, 0x03, 0x00,
                            0xFC, 0x07, 0x00, 0x00, 0xFF, 0x03},
                           {0x01, 0x05, 0x04, 0x44, 0x02, 0x03, 0x00,
                            0x00, 0x00, 0x00, 0x00, 0x44, 0x03},
                           {0x01, 0x05, 0x01, 0x04, 0xE0, 0x03, 0x00,
                            0x00, 0xE3, 0x03, 0x00, 0x00, 0x00},
                           {0x01, 0x05, 0x04, 0x24, 0x02, 0x03, 0x00,
                            0x3E, 0x04, 0x00, 0x00, 0x1E, 0x03},
                           {0x01, 0x05, 0x04, 0x64, 0x02, 0x03, 0x00,
                            0x00, 0x00, 0x00, 0x00, 0x64, 0x03},
                           {0x01, 0x05, 0x01, 0xC4, 0x02, 0x03, 0x00,
                            0x00, 0xC1, 0x03, 0x00, 0x00, 0x00},
                           {0x01, 0x05, 0x01, 0x04, 0x03, 0x03, 0x00,
                            0x00, 0x00, 0x03, 0x00, 0x00, 0x00},
                           {0x01, 0x05, 0x04, 0x24, 0x00, 0x02, 0x00,
                            0x21, 0x00, 0x00, 0x00, 0x06, 0x03},
                           {0x01, 0x05, 0x04, 0x44, 0x00, 0x02, 0x00,
                            0x00, 0x00, 0x00, 0x00, 0x47, 0x03},
                           {0x01, 0x05, 0x04, 0x64, 0x00, 0x02, 0x00,
                            0x00, 0x00, 0x00, 0x00, 0x67, 0x03},
                           {0x01, 0x05, 0x04, 0x84, 0x00, 0x02, 0x00,
                            0x00, 0x00, 0x00, 0x00, 0x87, 0x03},
                           {0x01, 0x05, 0x04, 0xA4, 0x00, 0x02, 0x00,
                            0x00, 0x00, 0x00, 0x00, 0xA7, 0x03},
                           {0x01, 0x05, 0x04, 0x04, 0x02, 0x02, 0x00,
                            0x00, 0x00, 0x00, 0x00, 0x05, 0x03},
                           {0x01, 0x05, 0x04, 0x24, 0x02, 0x02, 0x00,
                            0x00, 0x00, 0x00, 0x00, 0x25, 0x03},
                           {0x01, 0x05, 0x04, 0x44, 0x02, 0x02, 0x00,
                            0x00, 0x00, 0x00, 0x00, 0x45, 0x03},
                           {0x01, 0x05, 0x04, 0x64, 0x02, 0x02, 0x00,
                            0x00, 0x00, 0x00, 0x00, 0x65, 0x03},
                           {0x01, 0x05, 0x04, 0x84, 0x02, 0x02, 0x00,
                            0x00, 0x00, 0x00, 0x00, 0x85, 0x03},
                           {0x01, 0x05, 0x04, 0x64, 0x04, 0x04, 0x00,
                            0xDC, 0x05, 0x00, 0x00, 0xBC, 0x03},
                           {0x01, 0x05, 0x04, 0x04, 0x05, 0x02, 0x00,
                            0x00, 0x00, 0x00, 0x00, 0x02, 0x03},
                           {0x01, 0x05, 0x04, 0x24, 0x05, 0x02, 0x00,
                            0x00, 0x00, 0x01, 0x00, 0x23, 0x03},
                           {0x01, 0x05, 0x04, 0x64, 0x00, 0x09, 0x00,
                            0x00, 0x00, 0x00, 0x00, 0x6C, 0x03},
                           {0x01, 0x05, 0x04, 0x64, 0x00, 0x08, 0x00,
                            0x00, 0x00, 0x00, 0x00, 0x6D, 0x03},
                           {0x01, 0x05, 0x04, 0xA4, 0x00, 0x07, 0x00,
                            0x00, 0x00, 0x00, 0x00, 0xA2, 0x03},
                           {0x01, 0x05, 0x04, 0x64, 0x00, 0x07, 0x00,
                            0x64, 0x00, 0x00, 0x00, 0x06, 0x03},
                           {0x01, 0x05, 0x04, 0x84, 0x00, 0x07, 0x00,
                            0x20, 0xA1, 0x07, 0x00, 0x04, 0x03},
                           {0x01, 0x05, 0x04, 0x24, 0x00, 0x07, 0x00,
                            0x21, 0x00, 0x00, 0x00, 0x03, 0x03},
                           {0x01, 0x05, 0x04, 0x44, 0x00, 0x07, 0x00,
                            0x00, 0x02, 0x00, 0x00, 0x40, 0x03},
                           {0x01, 0x05, 0x04, 0x04, 0x00, 0x07, 0x00,
                            0x20, 0x03, 0x00, 0x00, 0x21, 0x03},
                           {0x01, 0x05, 0x04, 0x04, 0x02, 0x04, 0x00,
                            0x00, 0x00, 0x00, 0x00, 0x03, 0x03},
                           {0x01, 0x05, 0x04, 0x44, 0x02, 0x04, 0x00,
                            0x09, 0x00, 0x00, 0x00, 0x4A, 0x03},
                           {0x01, 0x05, 0x04, 0x64, 0x02, 0x04, 0x00,
                            0x00, 0x00, 0x00, 0x00, 0x63, 0x03},
                           {0x01, 0x05, 0x04, 0x04, 0x04, 0x04, 0x00,
                            0x01, 0x00, 0x00, 0x00, 0x04, 0x03},
                           {0x01, 0x05, 0x04, 0x84, 0x04, 0x04, 0x00,
                            0x00, 0x00, 0x00, 0x00, 0x85, 0x03},
                           {0x01, 0x05, 0x04, 0x04, 0x40, 0x05, 0x00,
                            0x00, 0x00, 0x00, 0x00, 0x40, 0x03},
                           {0x01, 0x05, 0x04, 0x24, 0x40, 0x05, 0x00,
                            0x00, 0x00, 0x00, 0x00, 0x60, 0x03},
                           {0x01, 0x05, 0x04, 0x84, 0x02, 0x04, 0x00,
                            0x00, 0x00, 0x00, 0x00, 0x83, 0x03},
                           {0x01, 0x04, 0x04, 0x64, 0x07, 0x00, 0x00,
                            0x00, 0x00, 0x63, 0x03, 0x00, 0x00},
                           {0x01, 0x05, 0x04, 0x04, 0x05, 0x03, 0x00,
                            0x0A, 0x00, 0x00, 0x00, 0x09, 0x03}};
    int cmdsetc[53] = {13, 13, 13, 13, 13, 13, 13, 13, 13, 11, 13, 13, 11, 13,
                       13, 13, 13, 10, 13, 13, 10, 10, 13, 13, 13, 13, 13, 13,
                       13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
                       13, 13, 13, 13, 13, 13, 13, 13, 13, 11, 13};
    unsigned int exposure_time;
    int r;
    exposure_time = (unsigned int)exptime.data;
    ROS_INFO("Set Exposure Time to :%d us", exposure_time);

    unsigned char buffer_uchar;
    buffer_uchar = (unsigned char)exposure_time & 0xFF;
    cmdset[32][7] = buffer_uchar;
    buffer_uchar = (unsigned char)(exposure_time >> 8) & 0xFF;
    cmdset[32][8] = buffer_uchar;
    buffer_uchar = (unsigned char)(exposure_time >> 16) & 0xFF;
    cmdset[32][9] = buffer_uchar;
    buffer_uchar = (unsigned char)(exposure_time >> 24) & 0xFF;
    cmdset[32][10] = buffer_uchar;

    cmdset[32][11] = cmdset[32][1] ^ cmdset[32][2] ^ cmdset[32][3] ^
                     cmdset[32][4] ^ cmdset[32][5] ^ cmdset[32][6] ^
                     cmdset[32][7] ^ cmdset[32][8] ^ cmdset[32][9] ^
                     cmdset[32][10];

    r = pxd_serialConfigure(0x1, 0, 9600, 8, 0, 1, 0, 0, 0);

    if (r < 0) {
      ROS_ERROR("Framegrabber Serial Configure Error");  // error
      return;
    }
    int i;
    char readbuf[256];

    i = 32;
    r = pxd_serialWrite(0x1, 0, cmdset[i], cmdsetc[i]);
    if (r < 0) {
      ROS_ERROR("Framegrabber Board Not Open");
      return;
    }

    r = pxd_serialRead(0x1, 0, readbuf, 256);
  }

 private:
  ros::Subscriber cmd_set_exp_;
};

int main(int argc, char *argv[]) {
  ros::init(argc, argv, "ace2000_master");
  ace2000_master ace2000_master_;
  ros::spin();
  return 0;
}
